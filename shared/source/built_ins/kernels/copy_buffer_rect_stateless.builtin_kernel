/*
 * Copyright (C) 2018-2024 Intel Corporation
 *
 * SPDX-License-Identifier: MIT
 *
 */

R"===(

__kernel void CopyBufferRectBytes2dStateless(
    __global const char* src,
    __global char* dst,
    ulong4 SrcOrigin,
    ulong4 DstOrigin,
    ulong2 SrcPitch,
    ulong2 DstPitch )

{
    size_t x = get_global_id(0);
    size_t y = get_global_id(1);

    size_t LSrcOffset = x + SrcOrigin.x + ( ( y + SrcOrigin.y ) * SrcPitch.x );
    size_t LDstOffset = x + DstOrigin.x + ( ( y + DstOrigin.y ) * DstPitch.x );

    *( dst + LDstOffset )  = *( src + LSrcOffset );

}

__kernel void CopyBufferRectBytesMiddle2dStateless(
    const __global uint* src,
    __global uint* dst,
    ulong4 SrcOrigin,
    ulong4 DstOrigin,
    ulong2 SrcPitch,
    ulong2 DstPitch )

{
    size_t x = get_global_id(0);
    size_t y = get_global_id(1);

    size_t LSrcOffset = SrcOrigin.x + ( ( y + SrcOrigin.y ) * SrcPitch.x );
    size_t LDstOffset = DstOrigin.x + ( ( y + DstOrigin.y ) * DstPitch.x );

    src += LSrcOffset >> 2;
    dst += LDstOffset >> 2;
    
    uint4 loaded = vload4(x,src);
    vstore4(loaded,x,dst);
}

__kernel void CopyBufferRectBytes3dStateless(
    __global const char* src, 
    __global char* dst, 
    ulong4 SrcOrigin, 
    ulong4 DstOrigin, 
    ulong2 SrcPitch, 
    ulong2 DstPitch ) 
 
{ 
    size_t x = get_global_id(0); 
    size_t y = get_global_id(1); 
    size_t z = get_global_id(2); 
 
    size_t LSrcOffset = x + SrcOrigin.x + ( ( y + SrcOrigin.y ) * SrcPitch.x ) + ( ( z + SrcOrigin.z ) * SrcPitch.y ); 
    size_t LDstOffset = x + DstOrigin.x + ( ( y + DstOrigin.y ) * DstPitch.x ) + ( ( z + DstOrigin.z ) * DstPitch.y ); 
 
    *( dst + LDstOffset )  = *( src + LSrcOffset );  
 
}

__kernel void CopyBufferRectBytesMiddle3dStateless(
    const __global uint* src,
    __global uint* dst,
    ulong4 SrcOrigin,
    ulong4 DstOrigin,
    ulong2 SrcPitch,
    ulong2 DstPitch )

{
    size_t x = get_global_id(0); 
    size_t y = get_global_id(1); 
    size_t z = get_global_id(2); 
 
    size_t LSrcOffset = SrcOrigin.x + ( ( y + SrcOrigin.y ) * SrcPitch.x ) + ( ( z + SrcOrigin.z ) * SrcPitch.y ); 
    size_t LDstOffset = DstOrigin.x + ( ( y + DstOrigin.y ) * DstPitch.x ) + ( ( z + DstOrigin.z ) * DstPitch.y ); 

    src += LSrcOffset >> 2;
    dst += LDstOffset >> 2;
    
    uint4 loaded = vload4(x,src);
    vstore4(loaded,x,dst);
}
)==="
