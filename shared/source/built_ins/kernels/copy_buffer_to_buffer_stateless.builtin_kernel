/*
 * Copyright (C) 2019-2024 Intel Corporation
 *
 * SPDX-License-Identifier: MIT
 *
 */

R"===(
__kernel void CopyBufferToBufferBytesStateless(
    const __global uchar* pSrc,
    __global uchar* pDst,
    ulong srcOffsetInBytes,
    ulong dstOffsetInBytes,
    ulong bytesToRead )
{
    pSrc += ( srcOffsetInBytes + get_global_id(0) );
    pDst += ( dstOffsetInBytes + get_global_id(0) );
    pDst[ 0 ] = pSrc[ 0 ];
}

__kernel void CopyBufferToBufferLeftLeftoverStateless(
    const __global uchar* pSrc,
    __global uchar* pDst,
    ulong srcOffsetInBytes,
    ulong dstOffsetInBytes)
{
    size_t gid = get_global_id(0);
    pDst[ gid + dstOffsetInBytes ] = pSrc[ gid + srcOffsetInBytes ];
}

__kernel void CopyBufferToBufferMiddleStateless(
    const __global uint* pSrc,
    __global uint* pDst,
    ulong srcOffsetInBytes,
    ulong dstOffsetInBytes)
{
    size_t gid = get_global_id(0);
    pDst += dstOffsetInBytes >> 2;
    pSrc += srcOffsetInBytes >> 2;
    uint4 loaded = vload4(gid, pSrc);
    vstore4(loaded, gid, pDst);
}

__kernel void CopyBufferToBufferMiddleMisalignedStateless(
    __global const uint* pSrc,
     __global uint* pDst,
     ulong srcOffsetInBytes,
     ulong dstOffsetInBytes,
     uint misalignmentInBits)
{
    const size_t gid = get_global_id(0);
    pDst += dstOffsetInBytes >> 2;
    pSrc += srcOffsetInBytes >> 2;
    const uint4 src0 = vload4(gid, pSrc);
    const uint4 src1 = vload4(gid + 1, pSrc);

    uint4 result;
    result.x = (src0.x >> misalignmentInBits) | (src0.y << (32 - misalignmentInBits));
    result.y = (src0.y >> misalignmentInBits) | (src0.z << (32 - misalignmentInBits));
    result.z = (src0.z >> misalignmentInBits) | (src0.w << (32 - misalignmentInBits));
    result.w = (src0.w >> misalignmentInBits) | (src1.x << (32 - misalignmentInBits));
    vstore4(result, gid, pDst);
}

__kernel void CopyBufferToBufferRightLeftoverStateless(
    const __global uchar* pSrc,
    __global uchar* pDst,
    ulong srcOffsetInBytes,
    ulong dstOffsetInBytes)
{
    size_t gid = get_global_id(0);
    pDst[ gid + dstOffsetInBytes ] = pSrc[ gid + srcOffsetInBytes ];
}

__kernel void copyBufferToBufferBytesSingleStateless(__global uchar *dst, const __global uchar *src) {
    size_t gid = get_global_id(0);
    dst[gid] = (uchar)(src[gid]);
}

__kernel void CopyBufferToBufferSideRegionStateless(
    __global uchar* pDst,
    const __global uchar* pSrc,
    ulong len,
    ulong dstSshOffset, 
    ulong srcSshOffset 
    )
{
    size_t gid = get_global_id(0);
    __global uchar* pDstWithOffset = (__global uchar*)((__global uchar*)pDst + dstSshOffset);
    __global uchar* pSrcWithOffset = (__global uchar*)((__global uchar*)pSrc + srcSshOffset);
    if (gid < len) {
        pDstWithOffset[ gid ] = pSrcWithOffset[ gid ];
    }
}

__kernel void CopyBufferToBufferMiddleRegionStateless(
    __global uint* pDst,
    const __global uint* pSrc,
    ulong elems,
    ulong dstSshOffset, // Offset needed in case ptr has been adjusted for SSH alignment
    ulong srcSshOffset // Offset needed in case ptr has been adjusted for SSH alignment
    )
{
    size_t gid = get_global_id(0);
    __global uint* pDstWithOffset = (__global uint*)((__global uchar*)pDst + dstSshOffset);
    __global uint* pSrcWithOffset = (__global uint*)((__global uchar*)pSrc + srcSshOffset);
    if (gid < elems) {
        uint4 loaded = vload4(gid, pSrcWithOffset);
        vstore4(loaded, gid, pDstWithOffset);
    }
}

)==="